@page "/"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using OpenAI
@rendermode InteractiveServer
@inject Kernel Kernel
@using System.ClientModel
@inject IChatCompletionService ChatService 

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Send Message</h5>
                    <div class="form-group">
                        <label for="message">Message:</label>
                        <textarea class="form-control" id="message" rows="3" @bind="@message"></textarea>
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="SendMessage">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Response</h5>
                    <p>@response</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string message;
    private string response;
    private const string Model = "gpt-35-turbo";
    ChatHistory chatHistory = new ChatHistory();

    private async Task SendMessage()
    {
        //Jan 2025
        // Send the message and get the response
        // OpenAIClient client = new OpenAIClient(new ApiKeyCredential("7c15ae1a4a8640bdbaad741285c822bb"));
        // OpenAI.Chat.ChatClient chatService = client.GetChatClient(Model);
        // var response = await chatService.CompleteChatAsync(message);

        // Worked line of codes below

        //1 - First response
        // response = await Kernel.InvokePromptAsync<string>(message);

        //2 Streaming response
        // response = "";
        // var chunks =  Kernel.InvokePromptStreamingAsync<string>(message);
        // await foreach (var chunk in chunks)
        // {
        //     response += chunk;
        //    // chunk = await Kernel.InvokePromptStreamingAsync<string>(message);
        //     StateHasChanged();
        // }

        //3 Chat Hisotry
        chatHistory.AddUserMessage(message);
        response = "";
        var chunks = ChatService.GetStreamingChatMessageContentsAsync(chatHistory);//Kernel.InvokePromptStreamingAsync<string>(message);
        await foreach (var chunk in chunks)
        {
            response += chunk;
           // chunk = await Kernel.InvokePromptStreamingAsync<string>(message);
            StateHasChanged();
        }
        chatHistory.AddAssistantMessage(response);

    }

    private async Task<string> SendMessageAndGetResponse(string message)
    {
        // Implement your logic to send the message and get the response
        // For example, you can make an API call here
        // Replace the following line with your actual implementation
        await Task.Delay(1000);
        return "This is the response to your message: " + message;
    }
}
