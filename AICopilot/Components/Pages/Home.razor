@page "/"
@using Microsoft.SemanticKernel;

@using Microsoft.SemanticKernel.Connectors.AzureOpenAI
@using Microsoft.SemanticKernel.Connectors.Mistral
@using Microsoft.SemanticKernel.Connectors.OpenAI;
@using Microsoft.SemanticKernel.ChatCompletion;
@using Microsoft.SemanticKernel.Connectors.Google
@using OpenAI;

@inject Kernel Kernel;
@using System.ClientModel;
@inject IChatCompletionService ChatService;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Send Message</h5>
                    <div class="form-group">
                        <label for="message">Message:</label>
                        <textarea class="form-control" id="message" rows="3" @bind="@message"></textarea>
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="SendMessage">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Response</h5>
                    <p>@response</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string message;
    private string response;
    private const string Model = "gpt-35-turbo";
    ChatHistory chatHistory = new ChatHistory();

    private async Task SendMessage()
    {
        //Jan 2025
        chatHistory.AddUserMessage(message);
        #pragma warning disable SKEXP0070
IChatCompletionService chatCompletionService = new GoogleAIGeminiChatCompletionService("gemini-1.5-pro-latest","AIzaSyCgMgkukn3Y-OQUCBMoEcW6ITEhr7H4x9I");
var chatreply = await chatCompletionService.GetChatMessageContentAsync(chatHistory);

Console.WriteLine(chatreply.ToString());
response=chatreply.ToString();

        

    }

    private async Task<string> SendMessageAndGetResponse(string message)
    {
        // Implement your logic to send the message and get the response
        // For example, you can make an API call here
        // Replace the following line with your actual implementation
        await Task.Delay(1000);
        return "This is the response to your message: " + message;
    }
}
